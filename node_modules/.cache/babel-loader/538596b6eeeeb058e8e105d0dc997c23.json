{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/components/To-Do/ModalToDo.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useState, useEffect } from 'react';\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\nimport { ValidationForm, TextInput } from 'react-bootstrap4-form-validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalToDo = props => {\n  _s();\n\n  const formRef = /*#__PURE__*/createRef();\n  const [newNote, setNewNote] = useState('');\n  const [cardTodo, setCardTodo] = useState([]);\n  const [isBasic, setIsBasic] = useState(false);\n  const {\n    todoList\n  } = props.todoList ? props : [];\n  useEffect(() => {\n    setCardTodo(todoList);\n  }, [todoList]);\n\n  const completeHandler = (e, key) => {\n    const newCard = cardTodo.map((item, index) => {\n      return index === parseInt(key) ? { ...item,\n        complete: e.target.checked\n      } : item;\n    });\n    setCardTodo(newCard);\n  };\n\n  const handleChange = e => {\n    setNewNote(e.target.value);\n  };\n\n  const handleSubmit = (e, formData, inputs) => {\n    e.preventDefault();\n    setCardTodo([...cardTodo, {\n      note: newNote,\n      complete: false\n    }]);\n    setNewNote('');\n    resetForm();\n  };\n\n  const resetForm = () => {\n    formRef.current.resetValidationState(true);\n  };\n\n  const handleErrorSubmit = (e, formData, errorInputs) => {//console.log(errorInputs);\n  };\n\n  const deleteHandler = key => {\n    setCardTodo(cardTodo.filter((item, index) => index !== parseInt(key)));\n  };\n\n  const todoListHtml = cardTodo.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"to-do-list mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-inline-block\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: [item.complete ? 'done-task' : '', 'check-task custom-control custom-checkbox d-flex justify-content-center'].join(' '),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"custom-control-input\",\n              id: \"customCheck2\",\n              defaultChecked: item.complete,\n              onChange: e => completeHandler(e, index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"custom-control-label\",\n              children: item.note\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"float-right\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#!\",\n            className: \"delete_todolist\",\n            onClick: () => deleteHandler(index),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-trash-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 128\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-task\",\n          children: todoListHtml\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => setIsBasic(true),\n          children: \"ADD NEW TASK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          show: isBasic,\n          onHide: () => setIsBasic(false),\n          children: /*#__PURE__*/_jsxDEV(ValidationForm, {\n            ref: formRef,\n            onSubmit: handleSubmit,\n            onErrorSubmit: handleErrorSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              closeButton: true,\n              children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n                as: \"h5\",\n                children: \"Add New Todo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: /*#__PURE__*/_jsxDEV(TextInput, {\n                    name: \"newNoteModal\",\n                    id: \"newNoteModal\",\n                    placeholder: \"Create your task list\",\n                    required: true,\n                    value: newNote,\n                    onChange: handleChange,\n                    autoComplete: \"off\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 79,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n              className: \"p-3\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"submit\",\n                onClick: () => setIsBasic(false),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"light\",\n                onClick: () => setIsBasic(false),\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalToDo, \"/ow8W2cnK+8S2o94G+VyJffS0Z0=\");\n\n_c = ModalToDo;\nexport default ModalToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalToDo\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/components/To-Do/ModalToDo.js"],"names":["React","createRef","useState","useEffect","Row","Col","Button","Form","Modal","ValidationForm","TextInput","ModalToDo","props","formRef","newNote","setNewNote","cardTodo","setCardTodo","isBasic","setIsBasic","todoList","completeHandler","e","key","newCard","map","item","index","parseInt","complete","target","checked","handleChange","value","handleSubmit","formData","inputs","preventDefault","note","resetForm","current","resetValidationState","handleErrorSubmit","errorInputs","deleteHandler","filter","todoListHtml","join"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect } from 'react';\r\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput } from 'react-bootstrap4-form-validation';\r\n\r\nconst ModalToDo = props => {\r\n    const formRef = createRef();\r\n    const [newNote, setNewNote] = useState('');\r\n    const [cardTodo, setCardTodo] = useState([]);\r\n    const [isBasic, setIsBasic] = useState(false);\r\n\r\n    const { todoList } = (props.todoList) ? props : [];\r\n\r\n    useEffect(() => {\r\n        setCardTodo(todoList);\r\n    }, [todoList]);\r\n\r\n    const completeHandler = (e, key) => {\r\n        const newCard = cardTodo.map((item, index) => {\r\n            return (index === parseInt(key)) ? {...item, complete: e.target.checked } : item;\r\n        });\r\n        setCardTodo(newCard);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setNewNote(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e, formData, inputs) => {\r\n        e.preventDefault();\r\n        setCardTodo([...cardTodo, {note: newNote, complete: false}]);\r\n        setNewNote('');\r\n        resetForm();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        (formRef.current).resetValidationState(true);\r\n    };\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        //console.log(errorInputs);\r\n    };\r\n\r\n    const deleteHandler = key => {\r\n        setCardTodo(cardTodo.filter((item, index) => index !== parseInt(key)));\r\n    };\r\n\r\n    const todoListHtml = cardTodo.map((item, index) => {\r\n        return (\r\n            <div key={index}>\r\n                <div className=\"to-do-list mb-3\">\r\n                    <div className=\"d-inline-block\">\r\n                        <label className={[item.complete ? 'done-task' : '', 'check-task custom-control custom-checkbox d-flex justify-content-center'].join(' ')} >\r\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck2\" defaultChecked={item.complete} onChange={(e) => completeHandler(e, index)} />\r\n                                <span className=\"custom-control-label\">{item.note}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"float-right\"><a href=\"#!\" className=\"delete_todolist\" onClick={() => deleteHandler(index)}><i className=\"fa fa-trash-alt\"/></a></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                    <div className=\"new-task\">\r\n                        {todoListHtml}\r\n                    </div>\r\n                    <Button variant=\"primary\" onClick={() => setIsBasic(true)}>ADD NEW TASK</Button>\r\n                    <Modal show={isBasic} onHide={() => setIsBasic(false)}>\r\n                        <ValidationForm ref={formRef} onSubmit={handleSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title as=\"h5\">Add New Todo</Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <TextInput\r\n                                            name=\"newNoteModal\"\r\n                                            id=\"newNoteModal\"\r\n                                            placeholder=\"Create your task list\"\r\n                                            required\r\n                                            value={newNote}\r\n                                            onChange={handleChange}\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            </Modal.Body>\r\n                            <Modal.Footer className='p-3'>\r\n                                <Button variant=\"primary\" type=\"submit\" onClick={() => setIsBasic(false)}>Save</Button>\r\n                                <Button variant=\"light\" onClick={() => setIsBasic(false)}>Close</Button>\r\n                            </Modal.Footer>\r\n                        </ValidationForm>\r\n                    </Modal>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default ModalToDo;"]},"metadata":{},"sourceType":"module"}