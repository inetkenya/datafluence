{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/views/tables/react-table/Grouping.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport BTable from 'react-bootstrap/Table';\nimport { useTable, useGroupBy, useExpanded } from 'react-table';\nimport makeData from '../../../data/tableData';\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Table({\n  columns,\n  data\n}) {\n  _s();\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useGroupBy, useExpanded // useGroupBy would be pretty useless without useExpanded ;)\n  ); // We don't want to render all of the rows for this example, so cap\n  // it at 100 for this use case\n\n  const firstPageRows = rows.slice(0, 20);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BTable, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      responsive: true,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: [column.canGroupBy ?\n            /*#__PURE__*/\n            // If the column can be grouped, let's add a toggle\n            _jsxDEV(\"span\", { ...column.getGroupByToggleProps(),\n              children: column.isGrouped ? 'ðŸ›‘ ' : 'ðŸ‘Š '\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 21\n            }, this) : null, column.render('Header')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: firstPageRows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                style: {\n                  background: cell.isGrouped ? '#d5f7f0' : cell.isAggregated ? '#fff0db' : cell.isPlaceholder ? '#ffdde2' : '#fff'\n                },\n                children: cell.isGrouped ?\n                /*#__PURE__*/\n                // If it's a grouped cell, add an expander and row count\n                _jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", { ...row.getToggleRowExpandedProps(),\n                    children: row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 27\n                  }, this), ' ', cell.render('Cell'), \" (\", row.subRows.length, \")\"]\n                }, void 0, true) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n                // renderer for cell\n                cell.render('Aggregated') : cell.isPlaceholder ? null : // For cells with repeated values, render null\n                // Otherwise, just render the regular cell\n                cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Table, \"BYNTWeoXdryq+6lvDEiS5kf/9Fc=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nfunction Legend() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '0.5rem 0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        display: 'inline-block',\n        background: '#d5f7f0',\n        padding: '0.5rem'\n      },\n      children: \"Grouped\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        display: 'inline-block',\n        background: '#fff0db',\n        padding: '0.5rem'\n      },\n      children: \"Aggregated\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        display: 'inline-block',\n        background: '#ffdde2',\n        padding: '0.5rem'\n      },\n      children: \"Repeated Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n} // This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\n\n\n_c2 = Legend;\n\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n  leafValues.forEach(value => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n  return Math.round((min + max) / 2);\n}\n\nfunction App() {\n  _s2();\n\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName',\n      // Use a two-stage aggregator here to first\n      // count the total rows being aggregated,\n      // then sum any of those counts if they are\n      // aggregated further\n      aggregate: 'count',\n      Aggregated: ({\n        value\n      }) => `${value} Names`\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName',\n      // Use another two-stage aggregator here to\n      // first count the UNIQUE values from the rows\n      // being aggregated, then sum those counts if\n      // they are aggregated further\n      aggregate: 'uniqueCount',\n      Aggregated: ({\n        value\n      }) => `${value} Unique Names`\n    }]\n  }, {\n    Header: 'Info',\n    columns: [{\n      Header: 'Age',\n      accessor: 'age',\n      // Aggregate the average age of visitors\n      aggregate: 'average',\n      Aggregated: ({\n        value\n      }) => `${Math.round(value * 100) / 100} (avg)`\n    }, {\n      Header: 'Visits',\n      accessor: 'visits',\n      // Aggregate the sum of all visits\n      aggregate: 'sum',\n      Aggregated: ({\n        value\n      }) => `${value} (total)`\n    }, {\n      Header: 'Status',\n      accessor: 'status'\n    }, {\n      Header: 'Profile Progress',\n      accessor: 'progress',\n      // Use our custom roundedMedian aggregator\n      aggregate: roundedMedian,\n      Aggregated: ({\n        value\n      }) => `${value} (med)`\n    }]\n  }], []);\n  const data = React.useMemo(() => makeData(1000), []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        children: /*#__PURE__*/_jsxDEV(ModuleNotification, {\n          message: \"For more info please check the components's official documentation\",\n          link: \"https://react-table.tanstack.com/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: /*#__PURE__*/_jsxDEV(Card.Title, {\n              as: \"h5\",\n              children: \"Grouping Table\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              columns: columns,\n              data: data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Table\");\n$RefreshReg$(_c2, \"Legend\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/tables/react-table/Grouping.js"],"names":["React","Row","Col","Card","BTable","useTable","useGroupBy","useExpanded","makeData","ModuleNotification","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","canGroupBy","getGroupByToggleProps","isGrouped","render","row","i","getRowProps","cells","cell","getCellProps","background","isAggregated","isPlaceholder","getToggleRowExpandedProps","isExpanded","subRows","length","Legend","padding","display","roundedMedian","leafValues","min","max","forEach","value","Math","round","App","useMemo","Header","accessor","aggregate","Aggregated"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport { useTable, useGroupBy, useExpanded } from 'react-table'\r\n\r\nimport makeData from '../../../data/tableData';\r\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\r\n\r\nfunction Table({ columns, data }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useGroupBy,\r\n    useExpanded // useGroupBy would be pretty useless without useExpanded ;)\r\n  )\r\n\r\n  // We don't want to render all of the rows for this example, so cap\r\n  // it at 100 for this use case\r\n  const firstPageRows = rows.slice(0, 20);\r\n\r\n  return (\r\n    <>\r\n      <Legend />\r\n      <BTable striped bordered hover responsive {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  {column.canGroupBy ? (\r\n                    // If the column can be grouped, let's add a toggle\r\n                    <span {...column.getGroupByToggleProps()}>\r\n                      {column.isGrouped ? 'ðŸ›‘ ' : 'ðŸ‘Š '}\r\n                    </span>\r\n                  ) : null}\r\n                  {column.render('Header')}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td\r\n                      // For educational purposes, let's color the\r\n                      // cell depending on what type it is given\r\n                      // from the useGroupBy hook\r\n                      {...cell.getCellProps()}\r\n                      style={{\r\n                        background: cell.isGrouped\r\n                          ? '#d5f7f0'\r\n                          : cell.isAggregated\r\n                          ? '#fff0db'\r\n                          : cell.isPlaceholder\r\n                          ? '#ffdde2'\r\n                          : '#fff',\r\n                      }}\r\n                    >\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell')} ({row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell')\r\n                      )}\r\n                    </td>\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </BTable>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction Legend() {\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '0.5rem 0',\r\n      }}\r\n    >\r\n      <span\r\n        style={{\r\n          display: 'inline-block',\r\n          background: '#d5f7f0',\r\n          padding: '0.5rem',\r\n        }}\r\n      >\r\n        Grouped\r\n      </span>{' '}\r\n      <span\r\n        style={{\r\n          display: 'inline-block',\r\n          background: '#fff0db',\r\n          padding: '0.5rem',\r\n        }}\r\n      >\r\n        Aggregated\r\n      </span>{' '}\r\n      <span\r\n        style={{\r\n          display: 'inline-block',\r\n          background: '#ffdde2',\r\n          padding: '0.5rem',\r\n        }}\r\n      >\r\n        Repeated Value\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\n// This is a custom aggregator that\r\n// takes in an array of leaf values and\r\n// returns the rounded median\r\nfunction roundedMedian(leafValues) {\r\n  let min = leafValues[0] || 0\r\n  let max = leafValues[0] || 0\r\n\r\n  leafValues.forEach(value => {\r\n    min = Math.min(min, value)\r\n    max = Math.max(max, value)\r\n  })\r\n\r\n  return Math.round((min + max) / 2)\r\n}\r\n\r\nfunction App() {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        columns: [\r\n          {\r\n            Header: 'First Name',\r\n            accessor: 'firstName',\r\n            // Use a two-stage aggregator here to first\r\n            // count the total rows being aggregated,\r\n            // then sum any of those counts if they are\r\n            // aggregated further\r\n            aggregate: 'count',\r\n            Aggregated: ({ value }) => `${value} Names`,\r\n          },\r\n          {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n            // Use another two-stage aggregator here to\r\n            // first count the UNIQUE values from the rows\r\n            // being aggregated, then sum those counts if\r\n            // they are aggregated further\r\n            aggregate: 'uniqueCount',\r\n            Aggregated: ({ value }) => `${value} Unique Names`,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        Header: 'Info',\r\n        columns: [\r\n          {\r\n            Header: 'Age',\r\n            accessor: 'age',\r\n            // Aggregate the average age of visitors\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${Math.round(value * 100) / 100} (avg)`,\r\n          },\r\n          {\r\n            Header: 'Visits',\r\n            accessor: 'visits',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'sum',\r\n            Aggregated: ({ value }) => `${value} (total)`,\r\n          },\r\n          {\r\n            Header: 'Status',\r\n            accessor: 'status',\r\n          },\r\n          {\r\n            Header: 'Profile Progress',\r\n            accessor: 'progress',\r\n            // Use our custom roundedMedian aggregator\r\n            aggregate: roundedMedian,\r\n            Aggregated: ({ value }) => `${value} (med)`,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  )\r\n\r\n  const data = React.useMemo(() => makeData(1000), [])\r\n\r\n  return (  \r\n    <React.Fragment>\r\n      <Row>\r\n          <Col sm={12}>  \r\n              <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://react-table.tanstack.com/' />\r\n          </Col>\r\n      </Row>\r\n      <Row>\r\n          <Col>\r\n              <Card>\r\n                  <Card.Header>\r\n                      <Card.Title as=\"h5\">Grouping Table</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                      <Table columns={columns} data={data} />\r\n                  </Card.Body>\r\n              </Card>\r\n          </Col>\r\n      </Row>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}