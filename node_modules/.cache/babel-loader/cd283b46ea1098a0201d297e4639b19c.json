{"ast":null,"code":"const chartData = {\n  height: 350,\n  type: 'scatter',\n  options: {\n    chart: {\n      zoom: {\n        type: 'xy'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    colors: ['#4099ff', '#0e9e4a', '#FF5370', '#FFB64D', '#00bcd4'],\n    grid: {\n      xaxis: {\n        showLines: true\n      },\n      yaxis: {\n        showLines: true\n      }\n    },\n    xaxis: {\n      type: 'datetime'\n    },\n    yaxis: {\n      max: 70\n    }\n  },\n  series: [{\n    name: 'TEAM 1',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'TEAM 2',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'TEAM 3',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'TEAM 4',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'TEAM 5',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }]\n};\nexport default chartData;\n\nfunction generateDayWiseTimeSeries(baseval, count, yrange) {\n  let i = 0;\n  const series = [];\n\n  while (i < count) {\n    const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    series.push([baseval, y]);\n    baseval += 86400000;\n    i++;\n  }\n\n  return series;\n}","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/charts/apex-chart/chart/scatter-chart-2.js"],"names":["chartData","height","type","options","chart","zoom","dataLabels","enabled","colors","grid","xaxis","showLines","yaxis","max","series","name","data","generateDayWiseTimeSeries","Date","getTime","min","baseval","count","yrange","i","y","Math","floor","random","push"],"mappings":"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","sourcesContent":["const chartData = {\r\n    height: 350,\r\n    type: 'scatter',\r\n    options: {\r\n        chart: {\r\n            zoom: {\r\n                type: 'xy'\r\n            }\r\n        },\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        colors: ['#4099ff', '#0e9e4a', '#FF5370', '#FFB64D', '#00bcd4'],\r\n        grid: {\r\n            xaxis: {\r\n                showLines: true\r\n            },\r\n            yaxis: {\r\n                showLines: true\r\n            },\r\n        },\r\n        xaxis: {\r\n            type: 'datetime',\r\n\r\n        },\r\n        yaxis: {\r\n            max: 70\r\n        }\r\n    },\r\n    series: [\r\n        {\r\n            name: 'TEAM 1',\r\n            data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\r\n                min: 10,\r\n                max: 60\r\n            })\r\n        },\r\n        {\r\n            name: 'TEAM 2',\r\n            data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\r\n                min: 10,\r\n                max: 60\r\n            })\r\n        },\r\n        {\r\n            name: 'TEAM 3',\r\n            data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\r\n                min: 10,\r\n                max: 60\r\n            })\r\n        },\r\n        {\r\n            name: 'TEAM 4',\r\n            data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\r\n                min: 10,\r\n                max: 60\r\n            })\r\n        },\r\n        {\r\n            name: 'TEAM 5',\r\n            data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\r\n                min: 10,\r\n                max: 60\r\n            })\r\n        },\r\n    ]\r\n}\r\nexport default chartData;\r\n\r\nfunction generateDayWiseTimeSeries(baseval, count, yrange) {\r\n    let i = 0;\r\n    const series = [];\r\n    while (i < count) {\r\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\r\n\r\n        series.push([baseval, y]);\r\n        baseval += 86400000;\r\n        i++;\r\n    }\r\n    return series;\r\n}"]},"metadata":{},"sourceType":"module"}