{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/views/extensions/ImageCropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Row, Col, Card, Button, Modal } from 'react-bootstrap';\nimport Cropper from \"react-cropper\";\nimport ModuleNotification from '../../components/Widgets/Statistic/Notification';\nimport \"cropperjs/dist/cropper.css\";\nimport defaultSrc from \"../../assets/images/light-box/l1.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImageCropper = () => {\n  _s();\n\n  const [image, setImage] = useState(defaultSrc);\n  const [cropData, setCropData] = useState(\"#\");\n  const [cropper, setCropper] = useState();\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const onChange = e => {\n    e.preventDefault();\n    let files;\n\n    if (e.dataTransfer) {\n      files = e.dataTransfer.files;\n    } else if (e.target) {\n      files = e.target.files;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      setImage(reader.result);\n    };\n\n    reader.readAsDataURL(files[0]);\n  };\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      setCropData(cropper.getCroppedCanvas().toDataURL());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        children: /*#__PURE__*/_jsxDEV(ModuleNotification, {\n          message: \"For more info please check the components's official documentation\",\n          link: \"https://www.npmjs.com/package/react-cropper\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Image Cropper Plugin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              className: \"justify-content-between\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  onChange: onChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"float-right\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: () => setImage(defaultSrc),\n                    children: \"Use default img\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 61,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                className: \"mt-3\",\n                children: /*#__PURE__*/_jsxDEV(Cropper, {\n                  style: {\n                    height: 400,\n                    width: \"100%\"\n                  },\n                  initialAspectRatio: 1,\n                  preview: \".img-preview\",\n                  src: image,\n                  viewMode: 1,\n                  guides: true,\n                  minCropBoxHeight: 10,\n                  minCropBoxWidth: 10,\n                  background: false,\n                  responsive: true,\n                  autoCropArea: 1,\n                  checkOrientation: false // https://github.com/fengyuanchen/cropperjs/issues/671\n                  ,\n                  onInitialized: instance => {\n                    setCropper(instance);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            getCropData();\n            handleShow();\n          },\n          children: \"Crop Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: show,\n        onHide: handleClose,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Croped Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            style: {\n              width: \"100%\",\n              height: \"auto\"\n            },\n            src: cropData,\n            alt: \"cropped\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ImageCropper, \"jk5V9IRBgOhMmh7V5XIKsb8GVz4=\");\n\n_c = ImageCropper;\nexport default ImageCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/extensions/ImageCropper.js"],"names":["React","useState","Row","Col","Card","Button","Modal","Cropper","ModuleNotification","defaultSrc","ImageCropper","image","setImage","cropData","setCropData","cropper","setCropper","show","setShow","handleClose","handleShow","onChange","e","preventDefault","files","dataTransfer","target","reader","FileReader","onload","result","readAsDataURL","getCropData","getCroppedCanvas","toDataURL","height","width","instance"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Row, Col, Card, Button, Modal } from 'react-bootstrap';\r\nimport Cropper from \"react-cropper\";\r\nimport ModuleNotification from '../../components/Widgets/Statistic/Notification';\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\nimport defaultSrc from \"../../assets/images/light-box/l1.jpg\";\r\n\r\nconst ImageCropper = () => {\r\n    const [image, setImage] = useState(defaultSrc);\r\n    const [cropData, setCropData] = useState(\"#\");\r\n    const [cropper, setCropper] = useState();\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const onChange = (e) => {\r\n        e.preventDefault();\r\n        let files;\r\n        if (e.dataTransfer) {\r\n        files = e.dataTransfer.files;\r\n        } else if (e.target) {\r\n        files = e.target.files;\r\n        }\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n        setImage(reader.result);\r\n        };\r\n        reader.readAsDataURL(files[0]);\r\n    };\r\n\r\n    const getCropData = () => {\r\n        if (typeof cropper !== \"undefined\") {\r\n        setCropData(cropper.getCroppedCanvas().toDataURL());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col sm={12}>  \r\n                    <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://www.npmjs.com/package/react-cropper'  />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <h5>Image Cropper Plugin</h5>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className='justify-content-between'>\r\n                                <Col>\r\n                                    <input type=\"file\" onChange={onChange} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className='float-right'>\r\n                                        <Button onClick={() => setImage(defaultSrc)}>Use default img</Button>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col sm={12} className='mt-3'>\r\n                                    <Cropper\r\n                                        style={{ height: 400, width: \"100%\" }}\r\n                                        initialAspectRatio={1}\r\n                                        preview=\".img-preview\"\r\n                                        src={image}\r\n                                        viewMode={1}\r\n                                        guides={true}\r\n                                        minCropBoxHeight={10}\r\n                                        minCropBoxWidth={10}\r\n                                        background={false}\r\n                                        responsive={true}\r\n                                        autoCropArea={1}\r\n                                        checkOrientation={false} // https://github.com/fengyuanchen/cropperjs/issues/671\r\n                                        onInitialized={(instance) => {\r\n                                            setCropper(instance);\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col sm={12}>\r\n                    <Button onClick={() => {\r\n                        getCropData();\r\n                        handleShow();\r\n                    }}>Crop Image</Button>\r\n                </Col>\r\n                <Modal show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Croped Image</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <img style={{ width: \"100%\", height: \"auto\" }} src={cropData} alt=\"cropped\" />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ImageCropper;"]},"metadata":{},"sourceType":"module"}