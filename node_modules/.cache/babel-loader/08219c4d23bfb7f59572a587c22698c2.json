{"ast":null,"code":"const chartData = {\n  height: 350,\n  type: 'heatmap',\n  options: {\n    dataLabels: {\n      enabled: false\n    },\n    colors: ['#4099ff'],\n    title: {\n      text: 'HeatMap Chart (Single color)'\n    }\n  },\n  series: [{\n    name: 'Metric1',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric2',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric3',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric4',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric5',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric6',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric7',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric8',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric9',\n    data: generateDatasehratheat(12, {\n      min: 0,\n      max: 90\n    })\n  }]\n};\nexport default chartData;\n\nfunction generateDatasehratheat(count, yrange) {\n  let i = 0;\n  const series = [];\n\n  while (i < count) {\n    series.push({\n      x: 'w' + (i + 1).toString(),\n      y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n    });\n    i++;\n  }\n\n  return series;\n}","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/charts/apex-chart/chart/heat-map-chart-1.js"],"names":["chartData","height","type","options","dataLabels","enabled","colors","title","text","series","name","data","generateDatasehratheat","min","max","count","yrange","i","push","x","toString","y","Math","floor","random"],"mappings":"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","sourcesContent":["const chartData = {\r\n    height: 350,\r\n    type: 'heatmap',\r\n    options: {\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        colors: ['#4099ff'],\r\n        title: {\r\n            text: 'HeatMap Chart (Single color)'\r\n        },\r\n    },\r\n    series: [\r\n        {\r\n            name: 'Metric1',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric2',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric3',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric4',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric5',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric6',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric7',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric8',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric9',\r\n            data: generateDatasehratheat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        }\r\n    ]\r\n}\r\nexport default chartData;\r\n\r\nfunction generateDatasehratheat(count, yrange) {\r\n    let i = 0;\r\n    const series = [];\r\n    while (i < count) {\r\n        series.push({\r\n            x: 'w' + (i + 1).toString(),\r\n            y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\r\n        });\r\n        i++;\r\n    }\r\n    return series;\r\n}"]},"metadata":{},"sourceType":"module"}