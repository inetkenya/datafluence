{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/data/schoolData.js\";\nimport namor from 'namor';\nimport React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst images = require.context('../assets/images/user', true);\n\nconst range = len => {\n  const arr = [];\n\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\n\nconst randomDate = (start, end) => {\n  let today = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n  var dd = today.getDate();\n  var mm = today.getMonth() + 1;\n  var yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  return yyyy + '-' + mm + '-' + dd;\n};\n\nconst GetAvatar = name => {\n  const photo_new = 'avatar-' + Math.floor(Math.random() * 5 + 1) + '.jpg';\n  let photo = images(`./${photo_new}`);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: photo.default,\n    className: \"img-fluid img-radius wid-40\",\n    alt: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n};\n\n_c = GetAvatar;\n\nconst newPerson = () => {\n  let nameEmail = namor.generate({\n    words: 2,\n    saltLength: 0,\n    saltType: 'number'\n  });\n  const name = (nameEmail.charAt(0).toUpperCase() + nameEmail.slice(1)).replaceAll('-', ' ');\n  let department = namor.generate({\n    words: 2,\n    saltLength: 0,\n    saltType: 'number'\n  });\n  department = (department.charAt(0).toUpperCase() + department.slice(1)).replaceAll('-', ' ');\n  const number = Math.floor(Math.random() * 6 + 1);\n  let variant = '';\n\n  switch (number) {\n    case 1:\n      variant = 'primary';\n      break;\n\n    case 2:\n      variant = 'danger';\n      break;\n\n    case 3:\n      variant = 'success';\n      break;\n\n    case 4:\n      variant = 'info';\n      break;\n\n    case 5:\n      variant = 'warning';\n      break;\n\n    case 6:\n      variant = 'dark';\n      break;\n\n    default:\n      variant = 'primary';\n  }\n\n  const bloodNumber = Math.floor(Math.random() * 8 + 1);\n  let bloodGroup = '';\n\n  switch (bloodNumber) {\n    case 1:\n      bloodGroup = 'A+';\n      break;\n\n    case 2:\n      bloodGroup = 'B+';\n      break;\n\n    case 3:\n      bloodGroup = 'AB+';\n      break;\n\n    case 4:\n      bloodGroup = 'O+';\n      break;\n\n    case 5:\n      bloodGroup = 'A-';\n      break;\n\n    case 6:\n      bloodGroup = 'B-';\n      break;\n\n    case 7:\n      bloodGroup = 'AB-';\n      break;\n\n    default:\n      bloodGroup = 'O-';\n  }\n\n  return {\n    id: namor.generate({\n      words: 0,\n      saltLength: 2,\n      saltType: 'number'\n    }),\n    name: name,\n    department: department,\n    avatar: GetAvatar(name),\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: 'badge badge-light-' + variant + ' text-capitalize',\n      children: name.charAt(0)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this),\n    email: nameEmail + '@gmail.com',\n    phone: '+9' + Math.floor(Math.random() * 9 + 1) + ' ' + namor.generate({\n      words: 0,\n      saltLength: 3,\n      saltType: 'number'\n    }) + '-' + namor.generate({\n      words: 0,\n      saltLength: 6,\n      saltType: 'number'\n    }),\n    roll: namor.generate({\n      words: 0,\n      saltLength: 6,\n      saltType: 'number'\n    }),\n    sex: Math.floor(Math.random() * 2 + 1) > 1 ? 'Male' : 'Female',\n    date: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group form-primary mb-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        className: \"form-control\",\n        defaultValue: randomDate(new Date(2012, 0, 1), new Date()),\n        onChange: e => console.log(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"form-bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this),\n    age: Math.floor(Math.random() * 18 + 6),\n    blood: bloodGroup,\n    action: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"#\",\n        className: \"btn btn-icon btn-rounded btn-info mx-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"feather icon-edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 81\n        }, this), \"\\xA0Edit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"#\",\n        className: \"btn btn-icon btn-rounded btn-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"feather icon-trash-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 78\n        }, this), \"\\xA0Delete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  };\n};\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(d => {\n      return { ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAvatar\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/data/schoolData.js"],"names":["namor","React","Link","images","require","context","range","len","arr","i","push","randomDate","start","end","today","Date","getTime","Math","random","dd","getDate","mm","getMonth","yyyy","getFullYear","GetAvatar","name","photo_new","floor","photo","default","newPerson","nameEmail","generate","words","saltLength","saltType","charAt","toUpperCase","slice","replaceAll","department","number","variant","bloodNumber","bloodGroup","id","avatar","icon","email","phone","roll","sex","date","e","console","log","age","blood","action","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined"],"mappings":"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","sourcesContent":["import namor from 'namor';\r\nimport React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst images = require.context('../assets/images/user', true);\r\n\r\nconst range = len => {\r\n    const arr = [];\r\n    for (let i = 0; i < len; i++) {\r\n        arr.push(i)\r\n    }\r\n    return arr\r\n};\r\n\r\nconst randomDate = (start, end) => {\r\n    let today = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r\n    var dd = today.getDate();\r\n    var mm = today.getMonth()+1; \r\n    var yyyy = today.getFullYear();\r\n    if(dd<10) {\r\n        dd='0'+dd;\r\n    } \r\n\r\n    if(mm<10) {\r\n        mm='0'+mm;\r\n    } \r\n\r\n    return yyyy+'-'+mm+'-'+dd;\r\n};\r\n\r\nconst GetAvatar = (name) => {\r\n    const photo_new = 'avatar-' + Math.floor(Math.random() * 5 + 1) +'.jpg';\r\n    let photo = images(`./${photo_new}`);\r\n    return <img src={photo.default} className=\"img-fluid img-radius wid-40\" alt={name}/>;\r\n};\r\n\r\nconst newPerson = () => {\r\n    let nameEmail = namor.generate({ words: 2, saltLength: 0, saltType: 'number' });\r\n    const name = (nameEmail.charAt(0).toUpperCase() + nameEmail.slice(1)).replaceAll('-', ' ');\r\n\r\n    let department = namor.generate({ words: 2, saltLength: 0, saltType: 'number' });\r\n    department = (department.charAt(0).toUpperCase() + department.slice(1)).replaceAll('-', ' ');\r\n\r\n    const number = Math.floor(Math.random() * 6 + 1);\r\n    let variant = '';\r\n    switch(number) {\r\n        case 1: \r\n            variant = 'primary';\r\n            break;\r\n        case 2: \r\n            variant = 'danger';\r\n            break;\r\n        case 3: \r\n            variant = 'success';\r\n            break;\r\n        case 4: \r\n            variant = 'info';\r\n            break;\r\n        case 5: \r\n            variant = 'warning';\r\n            break;\r\n        case 6: \r\n            variant = 'dark';\r\n            break;\r\n        default:\r\n            variant = 'primary';\r\n    }\r\n\r\n    const bloodNumber = Math.floor(Math.random() * 8 + 1);\r\n    let bloodGroup = '';\r\n    switch(bloodNumber) {\r\n        case 1: \r\n            bloodGroup = 'A+';\r\n            break;\r\n        case 2: \r\n            bloodGroup = 'B+';\r\n            break;\r\n        case 3: \r\n            bloodGroup = 'AB+';\r\n            break;\r\n        case 4: \r\n            bloodGroup = 'O+';\r\n            break;\r\n        case 5: \r\n            bloodGroup = 'A-';\r\n            break;\r\n        case 6: \r\n            bloodGroup = 'B-';\r\n            break;\r\n        case 7: \r\n            bloodGroup = 'AB-';\r\n            break;\r\n        default:\r\n            bloodGroup = 'O-';\r\n    }\r\n\r\n    return {\r\n        id: namor.generate({ words: 0, saltLength: 2, saltType: 'number' }),\r\n        name: name,\r\n        department: department,\r\n        avatar: GetAvatar(name),\r\n        icon: \r\n            <span className={'badge badge-light-' + variant + ' text-capitalize' }>{name.charAt(0)}</span>,\r\n        email: nameEmail + '@gmail.com',\r\n        phone: '+9' + Math.floor(Math.random() * 9 + 1) + ' ' + namor.generate({ words: 0, saltLength: 3, saltType: 'number' })+ '-' + namor.generate({ words: 0, saltLength: 6, saltType: 'number' }),\r\n        roll: namor.generate({ words: 0, saltLength: 6, saltType: 'number' }),\r\n        sex: Math.floor(Math.random() * 2 + 1) > 1 ? 'Male' : 'Female',\r\n        date: \r\n            <div className=\"form-group form-primary mb-0\">\r\n                <input type=\"date\" className=\"form-control\" defaultValue={randomDate(new Date(2012, 0, 1), new Date())} onChange={(e) => console.log(e)} />\r\n                <span className=\"form-bar\"/>\r\n            </div>,\r\n        age: Math.floor(Math.random() * 18 + 6),\r\n        blood: bloodGroup,\r\n        action: \r\n            <React.Fragment>\r\n                <Link to='#' className=\"btn btn-icon btn-rounded btn-info mx-1\"><i className=\"feather icon-edit\"/>&nbsp;Edit</Link>\r\n                <Link to='#' className=\"btn btn-icon btn-rounded btn-danger\"><i className=\"feather icon-trash-2\"/>&nbsp;Delete</Link>\r\n            </React.Fragment>\r\n    }\r\n};\r\n\r\nexport default function makeData(...lens) {\r\n    const makeDataLevel = (depth = 0) => {\r\n        const len = lens[depth];\r\n        return range(len).map(d => {\r\n            return {\r\n                ...newPerson(),\r\n                subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\r\n            }\r\n        })\r\n    };\r\n\r\n    return makeDataLevel()\r\n}\r\n"]},"metadata":{},"sourceType":"module"}