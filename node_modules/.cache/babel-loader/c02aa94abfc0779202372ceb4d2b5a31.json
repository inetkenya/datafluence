{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/layouts/AdminLayout/Navigation/NavContent/NavCollapse/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { Link } from \"react-router-dom\";\nimport NavItem from \"../NavItem\";\nimport LoopNavCollapse from './index';\nimport NavIcon from \"../NavIcon\";\nimport NavBadge from \"../NavBadge\";\nimport { ConfigContext } from \"../../../../../contexts/ConfigContext\";\nimport * as actionType from \"../../../../../store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavCollapse = ({\n  collapse,\n  type\n}) => {\n  _s();\n\n  const configContext = useContext(ConfigContext);\n  const {\n    dispatch\n  } = configContext;\n  const {\n    layout,\n    isOpen,\n    isTrigger\n  } = configContext.state;\n  useEffect(() => {\n    const currentIndex = document.location.pathname.toString().split('/').findIndex(id => id === collapse.id);\n\n    if (currentIndex > -1) {\n      dispatch({\n        type: actionType.COLLAPSE_TOGGLE,\n        menu: {\n          id: collapse.id,\n          type: type\n        }\n      });\n    }\n  }, [collapse, dispatch, type]);\n  let navItems = '';\n\n  if (collapse.children) {\n    const collapses = collapse.children;\n    navItems = Object.keys(collapses).map(item => {\n      item = collapses[item];\n\n      switch (item.type) {\n        case 'collapse':\n          return /*#__PURE__*/_jsxDEV(LoopNavCollapse, {\n            collapse: item,\n            type: \"sub\"\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 28\n          }, this);\n\n        case 'item':\n          return /*#__PURE__*/_jsxDEV(NavItem, {\n            layout: layout,\n            item: item\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 28\n          }, this);\n\n        default:\n          return false;\n      }\n    });\n  }\n\n  let itemTitle = collapse.title;\n\n  if (collapse.icon) {\n    itemTitle = /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"pcoded-mtext\",\n      children: collapse.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this);\n  }\n\n  let navLinkClass = ['nav-link'];\n  let navItemClass = ['nav-item', 'pcoded-hasmenu'];\n  const openIndex = isOpen.findIndex(id => id === collapse.id);\n\n  if (openIndex > -1) {\n    navItemClass = [...navItemClass, 'active'];\n\n    if (layout !== 'horizontal') {\n      navLinkClass = [...navLinkClass, 'active'];\n    }\n  }\n\n  const triggerIndex = isTrigger.findIndex(id => id === collapse.id);\n\n  if (triggerIndex > -1) {\n    navItemClass = [...navItemClass, 'pcoded-trigger'];\n  }\n\n  const currentIndex = document.location.pathname.toString().split('/').findIndex(id => id === collapse.id);\n\n  if (currentIndex > -1) {\n    navItemClass = [...navItemClass, 'active'];\n\n    if (layout !== 'horizontal') {\n      navLinkClass = [...navLinkClass, 'active'];\n    }\n  }\n\n  const subContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"#\",\n      className: navLinkClass.join(' '),\n      onClick: () => dispatch({\n        type: actionType.COLLAPSE_TOGGLE,\n        menu: {\n          id: collapse.id,\n          type: type\n        }\n      }),\n      children: [/*#__PURE__*/_jsxDEV(NavIcon, {\n        items: collapse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), itemTitle, /*#__PURE__*/_jsxDEV(NavBadge, {\n        items: collapse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      variant: \"flush\",\n      bsPrefix: \" \",\n      as: \"ul\",\n      className: \"pcoded-submenu\",\n      children: navItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n\n  let mainContent = '';\n\n  if (layout === 'horizontal') {\n    mainContent = /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      as: \"li\",\n      bsPrefix: \" \",\n      className: navItemClass.join(' '),\n      onMouseLeave: () => dispatch({\n        type: actionType.NAV_COLLAPSE_LEAVE,\n        menu: {\n          id: collapse.id,\n          type: type\n        }\n      }),\n      onMouseEnter: () => dispatch({\n        type: actionType.COLLAPSE_TOGGLE,\n        menu: {\n          id: collapse.id,\n          type: type\n        }\n      }),\n      children: subContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  } else {\n    mainContent = /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      as: \"li\",\n      bsPrefix: \" \",\n      className: navItemClass.join(' '),\n      children: subContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: mainContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NavCollapse, \"7S9fqeJ1hCxsdp481VcARWTOumA=\");\n\n_c = NavCollapse;\nexport default NavCollapse;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavCollapse\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/layouts/AdminLayout/Navigation/NavContent/NavCollapse/index.js"],"names":["React","useContext","useEffect","ListGroup","Link","NavItem","LoopNavCollapse","NavIcon","NavBadge","ConfigContext","actionType","NavCollapse","collapse","type","configContext","dispatch","layout","isOpen","isTrigger","state","currentIndex","document","location","pathname","toString","split","findIndex","id","COLLAPSE_TOGGLE","menu","navItems","children","collapses","Object","keys","map","item","itemTitle","title","icon","navLinkClass","navItemClass","openIndex","triggerIndex","subContent","join","mainContent","NAV_COLLAPSE_LEAVE"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport NavItem from \"../NavItem\";\r\nimport LoopNavCollapse from './index';\r\nimport NavIcon from \"../NavIcon\";\r\nimport NavBadge from \"../NavBadge\";\r\n\r\nimport { ConfigContext } from \"../../../../../contexts/ConfigContext\";\r\nimport * as actionType from \"../../../../../store/actions\";\r\n\r\nconst NavCollapse = ({ collapse, type }) => {\r\n    const configContext = useContext(ConfigContext);\r\n    const { dispatch } = configContext;\r\n\r\n    const { layout, isOpen, isTrigger } = configContext.state;\r\n\r\n    useEffect(() => {\r\n        const currentIndex = ((document.location.pathname).toString().split('/')).findIndex(id => id === collapse.id);\r\n        if (currentIndex > -1) {\r\n            dispatch({type: actionType.COLLAPSE_TOGGLE, menu: {id: collapse.id, type: type}})\r\n        }\r\n    }, [collapse, dispatch, type]);\r\n\r\n    let navItems = '';\r\n    if (collapse.children) {\r\n        const collapses = collapse.children;\r\n        navItems = Object.keys(collapses).map(item => {\r\n            item = collapses[item];\r\n            switch (item.type) {\r\n                case 'collapse':\r\n                    return <LoopNavCollapse key={item.id} collapse={item} type=\"sub\" />;\r\n                case 'item':\r\n                    return <NavItem layout={layout} key={item.id} item={item}/>;\r\n                default:\r\n                    return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    let itemTitle = collapse.title;\r\n    if (collapse.icon) {\r\n        itemTitle = <span className=\"pcoded-mtext\">{collapse.title}</span>;\r\n    }\r\n\r\n    let navLinkClass = ['nav-link'];\r\n\r\n    let navItemClass = ['nav-item', 'pcoded-hasmenu'];\r\n    const openIndex = isOpen.findIndex(id => id === collapse.id);\r\n    if (openIndex > -1) {\r\n        navItemClass = [...navItemClass, 'active'];\r\n        if (layout !== 'horizontal') {\r\n            navLinkClass = [...navLinkClass, 'active'];\r\n        }\r\n    }\r\n\r\n    const triggerIndex = isTrigger.findIndex(id => id === collapse.id);\r\n    if (triggerIndex > -1) {\r\n        navItemClass = [...navItemClass, 'pcoded-trigger'];\r\n    }\r\n\r\n    const currentIndex = ((document.location.pathname).toString().split('/')).findIndex(id => id === collapse.id);\r\n    if (currentIndex > -1) {\r\n        navItemClass = [...navItemClass, 'active'];\r\n        if (layout !== 'horizontal') {\r\n            navLinkClass = [...navLinkClass, 'active'];\r\n        }\r\n    }\r\n\r\n    const subContent = (\r\n        <React.Fragment>\r\n            <Link to='#' className={navLinkClass.join(' ')} onClick={() => dispatch({type: actionType.COLLAPSE_TOGGLE, menu: {id: collapse.id, type: type}})}>\r\n                <NavIcon items={collapse} />\r\n                {itemTitle}\r\n                <NavBadge items={collapse} />\r\n            </Link>\r\n            <ListGroup variant='flush' bsPrefix=' ' as='ul' className=\"pcoded-submenu\">\r\n                {navItems}\r\n            </ListGroup>\r\n        </React.Fragment>\r\n    );\r\n\r\n    let mainContent = '';\r\n    if (layout === 'horizontal') {\r\n        mainContent = (\r\n            <ListGroup.Item as='li' bsPrefix=' ' className={navItemClass.join(' ')} onMouseLeave={() => dispatch({type: actionType.NAV_COLLAPSE_LEAVE, menu: {id: collapse.id, type: type}})} onMouseEnter={() => dispatch({type: actionType.COLLAPSE_TOGGLE, menu: {id: collapse.id, type: type}})}>\r\n                {subContent}\r\n            </ListGroup.Item>\r\n        );\r\n    } else {\r\n        mainContent = (\r\n            <ListGroup.Item as='li' bsPrefix=' ' className={navItemClass.join(' ')}>\r\n                {subContent}\r\n            </ListGroup.Item>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {mainContent}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NavCollapse;\r\n"]},"metadata":{},"sourceType":"module"}