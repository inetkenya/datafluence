{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/views/tables/react-table/Filtering.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport BTable from 'react-bootstrap/Table';\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'; // A great library for fuzzy filtering/sorting items\n\nimport matchSorter from 'match-sorter';\nimport makeData from '../../../data/tableData';\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification'; // Define a default UI for filtering\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  _s();\n\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"d-flex align-items-center\",\n    children: [\"Search:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control ml-3\",\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `${count} records...`,\n      style: {\n        fontSize: '1.1rem',\n        border: '0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n} // Define a default UI for filtering\n\n\n_s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c = GlobalFilter;\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    className: \"form-control\",\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c2 = DefaultColumnFilter;\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  _s2();\n\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"form-control\",\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), options.map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option,\n      children: option\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n} // This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\n\n\n_s2(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c3 = SelectColumnFilter;\n\nfunction SliderColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  _s3();\n\n  // Calculate the min and max\n  // using the preFilteredRows\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex align-items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control mr-2\",\n      type: \"range\",\n      min: min,\n      max: max,\n      value: filterValue || min,\n      onChange: e => {\n        setFilter(parseInt(e.target.value, 10));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setFilter(undefined),\n      children: \"Off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n} // This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\n\n\n_s3(SliderColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c4 = SliderColumnFilter;\n\nfunction NumberRangeColumnFilter({\n  column: {\n    filterValue = [],\n    preFilteredRows,\n    setFilter,\n    id\n  }\n}) {\n  _s4();\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      value: filterValue[0] || '',\n      type: \"number\",\n      onChange: e => {\n        const val = e.target.value;\n        setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\n      },\n      placeholder: `Min (${min})`,\n      style: {\n        width: '70px',\n        marginRight: '0.5rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), \"to\", /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      value: filterValue[1] || '',\n      type: \"number\",\n      onChange: e => {\n        const val = e.target.value;\n        setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\n      },\n      placeholder: `Max (${max})`,\n      style: {\n        width: '70px',\n        marginLeft: '0.5rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(NumberRangeColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c5 = NumberRangeColumnFilter;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Our table component\n\n\nfunction Table({\n  columns,\n  data\n}) {\n  _s5();\n\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ); // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BTable, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      responsive: true,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: column.canFilter ? column.render('Filter') : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            style: {\n              textAlign: 'left'\n            },\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n              preGlobalFilteredRows: preGlobalFilteredRows,\n              globalFilter: state.globalFilter,\n              setGlobalFilter: setGlobalFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: firstPageRows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 26\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} // Define a custom filter filter function!\n\n\n_s5(Table, \"sLx+WA3LLL3TGGS2Xdbx5fvHfG4=\", false, function () {\n  return [useTable];\n});\n\n_c6 = Table;\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n} // This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\n\n\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';\n\nfunction App() {\n  _s6();\n\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName',\n      // Use our custom `fuzzyText` filter on this column\n      filter: 'fuzzyText'\n    }]\n  }, {\n    Header: 'Info',\n    columns: [{\n      Header: 'Age',\n      accessor: 'age',\n      Filter: SliderColumnFilter,\n      filter: 'equals'\n    }, {\n      Header: 'Visits',\n      accessor: 'visits',\n      Filter: NumberRangeColumnFilter,\n      filter: 'between'\n    }, {\n      Header: 'Status',\n      accessor: 'status',\n      Filter: SelectColumnFilter,\n      filter: 'includes'\n    }, {\n      Header: 'Profile Progress',\n      accessor: 'progress',\n      Filter: SliderColumnFilter,\n      filter: filterGreaterThan\n    }]\n  }], []);\n  const data = React.useMemo(() => makeData(1000), []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        children: /*#__PURE__*/_jsxDEV(ModuleNotification, {\n          message: \"For more info please check the components's official documentation\",\n          link: \"https://react-table.tanstack.com/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: /*#__PURE__*/_jsxDEV(Card.Title, {\n              as: \"h5\",\n              children: \"Table Filtering\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              columns: columns,\n              data: data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 7\n  }, this);\n}\n\n_s6(App, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c7 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"GlobalFilter\");\n$RefreshReg$(_c2, \"DefaultColumnFilter\");\n$RefreshReg$(_c3, \"SelectColumnFilter\");\n$RefreshReg$(_c4, \"SliderColumnFilter\");\n$RefreshReg$(_c5, \"NumberRangeColumnFilter\");\n$RefreshReg$(_c6, \"Table\");\n$RefreshReg$(_c7, \"App\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/tables/react-table/Filtering.js"],"names":["React","Row","Col","Card","Button","BTable","useTable","useFilters","useGlobalFilter","useAsyncDebounce","matchSorter","makeData","ModuleNotification","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","useState","onChange","undefined","e","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","SliderColumnFilter","min","max","Math","parseInt","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","keys","autoRemove","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","textAlign","getRowProps","cells","cell","getCellProps","filterGreaterThan","App","Header","accessor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Button } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\r\n// A great library for fuzzy filtering/sorting items\r\nimport matchSorter from 'match-sorter'\r\n\r\nimport makeData from '../../../data/tableData';\r\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\r\n\r\n// Define a default UI for filtering\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n}) {\r\n  const count = preGlobalFilteredRows.length\r\n  const [value, setValue] = React.useState(globalFilter)\r\n  const onChange = useAsyncDebounce(value => {\r\n    setGlobalFilter(value || undefined)\r\n  }, 200)\r\n\r\n  return (\r\n    <span className='d-flex align-items-center'>\r\n      Search:{' '}\r\n      <input\r\n      className='form-control ml-3'\r\n        value={value || \"\"}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        style={{\r\n          fontSize: '1.1rem',\r\n          border: '0',\r\n        }}\r\n      />\r\n    </span>\r\n  )\r\n}\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n    className='form-control'\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      options.add(row.values[id])\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n    className='form-control'\r\n      value={filterValue}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      <input\r\n      className='form-control mr-2'\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <Button onClick={() => setFilter(undefined)}>Off</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n      className='form-control'\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n      className='form-control'\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Our table component\r\nfunction Table({ columns, data }) {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    state,\r\n    visibleColumns,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn, // Be sure to pass the defaultColumn option\r\n      filterTypes,\r\n    },\r\n    useFilters, // useFilters!\r\n    useGlobalFilter // useGlobalFilter!\r\n  )\r\n\r\n  // We don't want to render all of the rows for this example, so cap\r\n  // it for this use case\r\n  const firstPageRows = rows.slice(0, 10)\r\n\r\n  return (\r\n    <>\r\n      <BTable striped bordered hover responsive {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  {column.render('Header')}\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n          <tr>\r\n            <th\r\n              colSpan={visibleColumns.length}\r\n              style={{\r\n                textAlign: 'left',\r\n              }}\r\n            >\r\n              <GlobalFilter\r\n                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                globalFilter={state.globalFilter}\r\n                setGlobalFilter={setGlobalFilter}\r\n              />\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </BTable>\r\n    </>\r\n  )\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter(row => {\r\n    const rowValue = row.values[id]\r\n    return rowValue >= filterValue\r\n  })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n\r\nfunction App() {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        columns: [\r\n          {\r\n            Header: 'First Name',\r\n            accessor: 'firstName',\r\n          },\r\n          {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        Header: 'Info',\r\n        columns: [\r\n          {\r\n            Header: 'Age',\r\n            accessor: 'age',\r\n            Filter: SliderColumnFilter,\r\n            filter: 'equals',\r\n          },\r\n          {\r\n            Header: 'Visits',\r\n            accessor: 'visits',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n          },\r\n          {\r\n            Header: 'Status',\r\n            accessor: 'status',\r\n            Filter: SelectColumnFilter,\r\n            filter: 'includes',\r\n          },\r\n          {\r\n            Header: 'Profile Progress',\r\n            accessor: 'progress',\r\n            Filter: SliderColumnFilter,\r\n            filter: filterGreaterThan,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  )\r\n\r\n  const data = React.useMemo(() => makeData(1000), [])\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <Row>\r\n            <Col sm={12}>  \r\n                <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://react-table.tanstack.com/' />\r\n            </Col>\r\n        </Row>\r\n          <Row>\r\n              <Col>\r\n                  <Card>\r\n                      <Card.Header>\r\n                          <Card.Title as=\"h5\">Table Filtering</Card.Title>\r\n                      </Card.Header>\r\n                      <Card.Body>\r\n                          <Table columns={columns} data={data} />\r\n                      </Card.Body>\r\n                  </Card>\r\n              </Col>\r\n          </Row>\r\n      </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}