{"ast":null,"code":"const chartData = {\n  height: 350,\n  type: 'heatmap',\n  options: {\n    stroke: {\n      width: 0\n    },\n    plotOptions: {\n      heatmap: {\n        radius: 30,\n        enableShades: false,\n        colorScale: {\n          ranges: [{\n            from: 0,\n            to: 50,\n            color: '#FFB64D'\n          }, {\n            from: 51,\n            to: 100,\n            color: '#FF5370'\n          }]\n        }\n      }\n    },\n    dataLabels: {\n      enabled: true,\n      style: {\n        colors: ['#fff']\n      }\n    },\n    colors: ['#4099ff', '#00bcd4', '#0e9e4a', '#FFB64D', '#FF5370'],\n    xaxis: {\n      type: 'category'\n    },\n    title: {\n      text: 'Rounded (Range without Shades)'\n    }\n  },\n  series: [{\n    name: 'Metric1',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric2',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric3',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric4',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric5',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric6',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric7',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric8',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric8',\n    data: generateDatasehrat(15, {\n      min: 0,\n      max: 90\n    })\n  }]\n};\nexport default chartData;\n\nfunction generateDatasehrat(count, yrange) {\n  let i = 0;\n  const series = [];\n\n  while (i < count) {\n    series.push({\n      x: (i + 1).toString(),\n      y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n    });\n    i++;\n  }\n\n  return series;\n}","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/charts/apex-chart/chart/heat-map-chart-2.js"],"names":["chartData","height","type","options","stroke","width","plotOptions","heatmap","radius","enableShades","colorScale","ranges","from","to","color","dataLabels","enabled","style","colors","xaxis","title","text","series","name","data","generateDatasehrat","min","max","count","yrange","i","push","x","toString","y","Math","floor","random"],"mappings":"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","sourcesContent":["const chartData = {\r\n    height: 350,\r\n    type: 'heatmap',\r\n    options: {\r\n        stroke: {\r\n            width: 0\r\n        },\r\n        plotOptions: {\r\n            heatmap: {\r\n                radius: 30,\r\n                enableShades: false,\r\n                colorScale: {\r\n                    ranges: [{\r\n                        from: 0,\r\n                        to: 50,\r\n                        color: '#FFB64D'\r\n                    },\r\n                        {\r\n                            from: 51,\r\n                            to: 100,\r\n                            color: '#FF5370'\r\n                        },\r\n                    ],\r\n                },\r\n\r\n            }\r\n        },\r\n        dataLabels: {\r\n            enabled: true,\r\n            style: {\r\n                colors: ['#fff']\r\n            }\r\n        },\r\n        colors: ['#4099ff', '#00bcd4', '#0e9e4a', '#FFB64D', '#FF5370'],\r\n        xaxis: {\r\n            type: 'category',\r\n        },\r\n        title: {\r\n            text: 'Rounded (Range without Shades)'\r\n        },\r\n    },\r\n    series: [\r\n        {\r\n            name: 'Metric1',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric2',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric3',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric4',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric5',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric6',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric7',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric8',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric8',\r\n            data: generateDatasehrat(15, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        }\r\n    ]\r\n}\r\nexport default chartData;\r\n\r\nfunction generateDatasehrat(count, yrange) {\r\n    let i = 0;\r\n    const series = [];\r\n    while (i < count) {\r\n        series.push({\r\n            x: (i + 1).toString(),\r\n            y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\r\n        });\r\n        i++;\r\n    }\r\n    return series;\r\n}"]},"metadata":{},"sourceType":"module"}