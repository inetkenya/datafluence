{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/components/To-Do/CardToDo.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useState, useEffect } from 'react';\nimport { Row, Col, Button, Form } from 'react-bootstrap';\nimport { ValidationForm, TextInputGroup } from 'react-bootstrap4-form-validation';\nimport complete from \"../../assets/images/complete.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardToDo = props => {\n  _s();\n\n  const formRef = /*#__PURE__*/createRef();\n  const [newNote, setNewNote] = useState('');\n  const [cardTodo, setCardTodo] = useState([]);\n  const {\n    todoList\n  } = props.todoList ? props : [];\n  useEffect(() => {\n    setCardTodo(todoList);\n  }, [todoList]);\n\n  const completeHandler = key => {\n    const newCard = cardTodo.map((item, index) => {\n      return index === parseInt(key) ? { ...item,\n        complete: !item['complete']\n      } : item;\n    });\n    setCardTodo(newCard);\n  };\n\n  const handleChange = e => {\n    setNewNote(e.target.value);\n  };\n\n  const handleSubmit = (e, formData, inputs) => {\n    e.preventDefault();\n    setCardTodo([...cardTodo, {\n      note: newNote,\n      complete: false\n    }]);\n    setNewNote('');\n    resetForm();\n  };\n\n  const resetForm = () => {\n    formRef.current.resetValidationState(true);\n  };\n\n  const handleErrorSubmit = (e, formData, errorInputs) => {//console.log(errorInputs);\n  };\n\n  const completeStyle = {\n    backgroundImage: `url(${complete})`,\n    position: 'absolute',\n    top: '5px',\n    right: '5px',\n    content: \"\",\n    width: '55px',\n    height: '55px',\n    backgroundSize: '100%'\n  };\n  const todoListHtml = cardTodo.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: item.complete ? 'complete' : '',\n      onClick: () => completeHandler(index),\n      children: [item.complete ? /*#__PURE__*/_jsxDEV(\"span\", {\n        style: completeStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 34\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.note\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(ValidationForm, {\n          ref: formRef,\n          onSubmit: handleSubmit,\n          onErrorSubmit: handleErrorSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: /*#__PURE__*/_jsxDEV(TextInputGroup, {\n                name: \"newNoteCard\",\n                id: \"newNoteCard\",\n                placeholder: \"Create your task list\",\n                required: true,\n                append: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"secondary\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-plus\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 87\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 45\n                }, this),\n                value: newNote,\n                onChange: handleChange,\n                autoComplete: \"off\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"task-container\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            id: \"task-list\",\n            children: todoListHtml\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardToDo, \"ZznJG9bR/yNeOLRh5zvSIS4ApUg=\");\n\n_c = CardToDo;\nexport default CardToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardToDo\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/components/To-Do/CardToDo.js"],"names":["React","createRef","useState","useEffect","Row","Col","Button","Form","ValidationForm","TextInputGroup","complete","CardToDo","props","formRef","newNote","setNewNote","cardTodo","setCardTodo","todoList","completeHandler","key","newCard","map","item","index","parseInt","handleChange","e","target","value","handleSubmit","formData","inputs","preventDefault","note","resetForm","current","resetValidationState","handleErrorSubmit","errorInputs","completeStyle","backgroundImage","position","top","right","content","width","height","backgroundSize","todoListHtml"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect } from 'react';\r\nimport { Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { ValidationForm, TextInputGroup } from 'react-bootstrap4-form-validation';\r\n\r\nimport complete from \"../../assets/images/complete.png\";\r\n\r\nconst CardToDo = props => {\r\n    const formRef = createRef();\r\n    const [newNote, setNewNote] = useState('');\r\n    const [cardTodo, setCardTodo] = useState([]);\r\n\r\n    const { todoList } = (props.todoList) ? props : [];\r\n\r\n    useEffect(() => {\r\n        setCardTodo(todoList);\r\n    }, [todoList]);\r\n\r\n    const completeHandler = (key) => {\r\n        const newCard = cardTodo.map((item, index) => {\r\n            return (index === parseInt(key)) ? {...item, complete: !item['complete'] } : item;\r\n        });\r\n        setCardTodo(newCard);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setNewNote(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e, formData, inputs) => {\r\n        e.preventDefault();\r\n        setCardTodo([...cardTodo, {note: newNote, complete: false}]);\r\n        setNewNote('');\r\n        resetForm();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        (formRef.current).resetValidationState(true);\r\n    };\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        //console.log(errorInputs);\r\n    };\r\n\r\n    const completeStyle = {\r\n        backgroundImage: `url(${complete})`,\r\n        position: 'absolute',\r\n        top: '5px',\r\n        right: '5px',\r\n        content: \"\",\r\n        width: '55px',\r\n        height: '55px',\r\n        backgroundSize: '100%'\r\n    };\r\n\r\n    const todoListHtml = cardTodo.map((item, index) => {\r\n        return (\r\n            <li key={index} className={item.complete ? 'complete' : ''} onClick={() => completeHandler(index)}>\r\n                {item.complete ? <span style={completeStyle} /> : ''}\r\n                <p>{item.note}</p>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                    <ValidationForm ref={formRef} onSubmit={handleSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <TextInputGroup\r\n                                    name=\"newNoteCard\"\r\n                                    id=\"newNoteCard\"\r\n                                    placeholder=\"Create your task list\"\r\n                                    required\r\n                                    append={<Button type=\"submit\" variant=\"secondary\"><i className=\"fa fa-plus\"/></Button>}\r\n                                    value={newNote}\r\n                                    onChange={handleChange}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </ValidationForm>\r\n                    <section id=\"task-container\">\r\n                        <ul id=\"task-list\">\r\n                            {todoListHtml}\r\n                        </ul>\r\n                    </section>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default CardToDo;"]},"metadata":{},"sourceType":"module"}