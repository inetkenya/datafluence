{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/components/To-Do/BasicToDo.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useState, useEffect } from 'react';\nimport { Row, Col, Button, Form } from 'react-bootstrap';\nimport { ValidationForm, TextInputGroup } from 'react-bootstrap4-form-validation';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicToDo = props => {\n  _s();\n\n  const formRef = /*#__PURE__*/createRef();\n  const [newNote, setNewNote] = useState('');\n  const [cardTodo, setCardTodo] = useState([]);\n  const {\n    todoList\n  } = props.todoList ? props : [];\n  useEffect(() => {\n    setCardTodo(todoList);\n  }, [todoList]);\n\n  const completeHandler = (e, key) => {\n    const newCard = cardTodo.map((item, index) => {\n      return index === parseInt(key) ? { ...item,\n        complete: e.target.checked\n      } : item;\n    });\n    setCardTodo(newCard);\n  };\n\n  const handleChange = e => {\n    setNewNote(e.target.value);\n  };\n\n  const handleSubmit = (e, formData, inputs) => {\n    e.preventDefault();\n    setCardTodo([...cardTodo, {\n      note: newNote,\n      complete: false\n    }]);\n    setNewNote('');\n    resetForm();\n  };\n\n  const resetForm = () => {\n    formRef.current.resetValidationState(true);\n  };\n\n  const handleErrorSubmit = (e, formData, errorInputs) => {//console.log(errorInputs);\n  };\n\n  const deleteHandler = key => {\n    setCardTodo(cardTodo.filter((item, index) => index !== parseInt(key)));\n  };\n\n  const todoListHTML = cardTodo.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"to-do-list mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-inline-block\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: [item.complete ? 'done-task' : '', 'check-task custom-control custom-checkbox d-flex justify-content-center'].join(' '),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"custom-control-input\",\n              id: \"customCheck2\",\n              defaultChecked: item.complete,\n              onChange: e => completeHandler(e, index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"custom-control-label\",\n              children: item.note\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"float-right\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"#\",\n            className: \"delete_todolist\",\n            onClick: () => deleteHandler(index),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-trash-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 128\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(ValidationForm, {\n          ref: formRef,\n          onSubmit: handleSubmit,\n          onErrorSubmit: handleErrorSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: /*#__PURE__*/_jsxDEV(TextInputGroup, {\n                name: \"newNote\",\n                id: \"newNote\",\n                placeholder: \"Create your task list\",\n                required: true,\n                append: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"secondary\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-plus\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 87\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 45\n                }, this),\n                value: newNote,\n                onChange: handleChange,\n                autoComplete: \"off\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-task\",\n          children: todoListHTML\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BasicToDo, \"ZznJG9bR/yNeOLRh5zvSIS4ApUg=\");\n\n_c = BasicToDo;\nexport default BasicToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicToDo\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/components/To-Do/BasicToDo.js"],"names":["React","createRef","useState","useEffect","Row","Col","Button","Form","ValidationForm","TextInputGroup","Link","BasicToDo","props","formRef","newNote","setNewNote","cardTodo","setCardTodo","todoList","completeHandler","e","key","newCard","map","item","index","parseInt","complete","target","checked","handleChange","value","handleSubmit","formData","inputs","preventDefault","note","resetForm","current","resetValidationState","handleErrorSubmit","errorInputs","deleteHandler","filter","todoListHTML","join"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect } from 'react';\r\nimport { Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { ValidationForm, TextInputGroup } from 'react-bootstrap4-form-validation';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst BasicToDo = props => {\r\n    const formRef = createRef();\r\n    const [newNote, setNewNote] = useState('');\r\n    const [cardTodo, setCardTodo] = useState([]);\r\n\r\n    const { todoList } = (props.todoList) ? props : [];\r\n\r\n    useEffect(() => {\r\n        setCardTodo(todoList);\r\n    }, [todoList]);\r\n\r\n    const completeHandler = (e, key) => {\r\n        const newCard = cardTodo.map((item, index) => {\r\n            return (index === parseInt(key)) ? {...item, complete: e.target.checked } : item;\r\n        });\r\n        setCardTodo(newCard);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setNewNote(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e, formData, inputs) => {\r\n        e.preventDefault();\r\n        setCardTodo([...cardTodo, {note: newNote, complete: false}]);\r\n        setNewNote('');\r\n        resetForm();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        (formRef.current).resetValidationState(true);\r\n    };\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        //console.log(errorInputs);\r\n    };\r\n\r\n    const deleteHandler = key => {\r\n        setCardTodo(cardTodo.filter((item, index) => index !== parseInt(key)));\r\n    };\r\n\r\n    const todoListHTML = cardTodo.map((item, index) => {\r\n        return (\r\n            <div key={index}>\r\n                <div className=\"to-do-list mb-3\">\r\n                    <div className=\"d-inline-block\">\r\n                        <label className={[item.complete ? 'done-task' : '', 'check-task custom-control custom-checkbox d-flex justify-content-center'].join(' ')} >\r\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck2\" defaultChecked={item.complete} onChange={(e) => completeHandler(e, index)} />\r\n                                <span className=\"custom-control-label\">{item.note}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"float-right\"><Link to='#' className=\"delete_todolist\" onClick={() => deleteHandler(index)}><i className=\"fa fa-trash-alt\"/></Link></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                    <ValidationForm ref={formRef} onSubmit={handleSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <TextInputGroup\r\n                                    name=\"newNote\"\r\n                                    id=\"newNote\"\r\n                                    placeholder=\"Create your task list\"\r\n                                    required\r\n                                    append={<Button type=\"submit\" variant=\"secondary\"><i className=\"fa fa-plus\"/></Button>}\r\n                                    value={newNote}\r\n                                    onChange={handleChange}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </ValidationForm>\r\n                    <div className=\"new-task\">\r\n                        {todoListHTML}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default BasicToDo;"]},"metadata":{},"sourceType":"module"}