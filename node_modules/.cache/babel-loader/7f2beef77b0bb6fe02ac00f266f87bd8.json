{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/views/forms/form-validation/SubmitValidationForm.js\";\nimport React from 'react';\nimport { Card, Button, Row, Col } from 'react-bootstrap';\nimport { SubmissionError, Field, reduxForm } from 'redux-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst submit = values => {\n  return sleep(1000).then(() => {\n    // simulate server latency\n    if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\n      throw new SubmissionError({\n        username: 'User does not exist',\n        _error: 'Login failed!'\n      });\n    } else if (values.password !== '123456') {\n      throw new SubmissionError({\n        password: 'Wrong password',\n        _error: 'Login failed!'\n      });\n    } else {\n      window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\n    }\n  });\n};\n\nconst renderField = ({\n  input,\n  label,\n  type,\n  meta: {\n    touched,\n    error\n  }\n}) => /*#__PURE__*/_jsxDEV(Row, {\n  className: \"my-3\",\n  children: [/*#__PURE__*/_jsxDEV(Col, {\n    sm: 3,\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"label-control\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Col, {\n    sm: 9,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...input,\n      placeholder: label,\n      type: type,\n      className: \"form-control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), touched && error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-c-red\",\n      children: [\"* \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 5\n}, this);\n\nconst SubmitValidationForm = props => {\n  const {\n    error,\n    handleSubmit,\n    pristine,\n    reset,\n    submitting\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(submit),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          as: \"h5\",\n          children: \"Submit Validation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          className: \"mt-2 text-muted\",\n          children: \"Usernames: john, paul, george, ringo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          className: \"mt-2 text-muted\",\n          children: \"Password: 123456\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"username\",\n          type: \"text\",\n          component: renderField,\n          label: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"password\",\n          type: \"password\",\n          component: renderField,\n          label: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), error && /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          variant: \"danger\",\n          className: \"float-right\",\n          disabled: pristine || submitting,\n          onClick: reset,\n          children: \"Clear Values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: \"mr-1 float-right\",\n          disabled: submitting,\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SubmitValidationForm;\nexport default reduxForm({\n  form: 'submitValidation' // a unique identifier for this form\n\n})(SubmitValidationForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"SubmitValidationForm\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/forms/form-validation/SubmitValidationForm.js"],"names":["React","Card","Button","Row","Col","SubmissionError","Field","reduxForm","sleep","ms","Promise","resolve","setTimeout","submit","values","then","includes","username","_error","password","window","alert","JSON","stringify","renderField","input","label","type","meta","touched","error","SubmitValidationForm","props","handleSubmit","pristine","reset","submitting","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Card, Button, Row, Col } from 'react-bootstrap';\r\nimport { SubmissionError, Field, reduxForm } from 'redux-form';\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nconst submit = (values) => {\r\n  return sleep(1000).then(() => {\r\n    // simulate server latency\r\n    if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n      throw new SubmissionError({\r\n        username: 'User does not exist',\r\n        _error: 'Login failed!'\r\n      })\r\n    } else if (values.password !== '123456') {\r\n      throw new SubmissionError({\r\n        password: 'Wrong password',\r\n        _error: 'Login failed!'\r\n      })\r\n    } else {\r\n      window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n    }\r\n  })\r\n}\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\r\n    <Row className='my-3'>\r\n        <Col sm={3}>\r\n            <label className='label-control'>{label}</label>\r\n        </Col>\r\n        <Col sm={9}>\r\n            <input {...input} placeholder={label} type={type} className='form-control' />\r\n            {touched && error && <span className='text-c-red'>* {error} </span>}\r\n        </Col>\r\n    </Row>\r\n);\r\n  \r\n  const SubmitValidationForm = props => {\r\n    const { error, handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form onSubmit={handleSubmit(submit)}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title as='h5'>Submit Validation</Card.Title>\r\n                    <Card.Subtitle className=\"mt-2 text-muted\">Usernames: john, paul, george, ringo</Card.Subtitle>\r\n                    <Card.Subtitle className=\"mt-2 text-muted\">Password: 123456</Card.Subtitle>\r\n                </Card.Header>\r\n                <Card.Body>                      \r\n                        <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\r\n                        <Field name=\"password\" type=\"password\" component={renderField} label=\"Password\" />\r\n                        {error && <strong>{error}</strong>}\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Button type=\"button\" variant='danger' className='float-right' disabled={pristine || submitting} onClick={reset}>Clear Values</Button>\r\n                    <Button type=\"submit\" className='mr-1 float-right' disabled={submitting}>Log In</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n        </form>\r\n    )\r\n  }\r\n  \r\n  export default reduxForm({\r\n    form: 'submitValidation' // a unique identifier for this form\r\n  })(SubmitValidationForm)"]},"metadata":{},"sourceType":"module"}