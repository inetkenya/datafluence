{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/views/forms/form-validation/CombinedValidations.js\";\nimport React from 'react';\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Card } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Schema = Yup.object().shape({\n  email: Yup.string().required('This field is required')\n}); // Async Validation\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = values => sleep(300).then(() => {\n  return false;\n});\n\nconst isRequired = message => value => !!value ? undefined : message;\n\nconst CombinedValidations = () => /*#__PURE__*/_jsxDEV(Card, {\n  children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n    children: /*#__PURE__*/_jsxDEV(Card.Title, {\n      as: \"h5\",\n      children: \"Formik - Pick a Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: Schema,\n      validate: validate,\n      initialValues: {\n        username: '',\n        email: ''\n      },\n      onSubmit: values => {\n        sleep(500).then(() => {\n          alert(JSON.stringify(values, null, 2));\n        });\n      },\n      render: ({\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n        validateField,\n        validateForm\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            sm: 3,\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"username\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 9,\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              name: \"username\",\n              validate: isRequired('This field is required'),\n              type: \"text\",\n              placeholder: \"username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              className: \"text-c-red\",\n              name: \"username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"my-3\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            sm: 3,\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"username\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 9,\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              name: \"email\",\n              validate: isRequired('This field is required'),\n              type: \"text\",\n              placeholder: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              className: \"text-c-red\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 5\n}, this);\n\n_c = CombinedValidations;\nexport default CombinedValidations;\n\nvar _c;\n\n$RefreshReg$(_c, \"CombinedValidations\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/forms/form-validation/CombinedValidations.js"],"names":["React","Button","Row","Col","Formik","Field","Form","ErrorMessage","Yup","Card","Schema","object","shape","email","string","required","sleep","ms","Promise","resolve","setTimeout","validate","values","then","isRequired","message","value","undefined","CombinedValidations","username","alert","JSON","stringify","errors","touched","setFieldValue","setFieldTouched","validateField","validateForm"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst Schema = Yup.object().shape({\r\n  email: Yup.string().required('This field is required'),\r\n});\r\n\r\n// Async Validation\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst validate = values =>\r\n  sleep(300).then(() => {\r\n    return false;\r\n  });\r\n\r\nconst isRequired = message => value => (!!value ? undefined : message);\r\n\r\nconst CombinedValidations = () => (\r\n    <Card>\r\n        <Card.Header>\r\n            <Card.Title as='h5'>Formik - Pick a Username</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <Formik\r\n            validationSchema={Schema}\r\n            validate={validate}\r\n            initialValues={{\r\n                username: '',\r\n                email: '',\r\n            }}\r\n            onSubmit={values => {\r\n                sleep(500).then(() => {\r\n                alert(JSON.stringify(values, null, 2));\r\n                });\r\n            }}\r\n            render={({\r\n                errors,\r\n                touched,\r\n                setFieldValue,\r\n                setFieldTouched,\r\n                validateField,\r\n                validateForm,\r\n            }) => (\r\n                <Form>\r\n                    <Row>\r\n                        <Col sm={3}>\r\n                            <label htmlFor=\"username\">Username</label>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Field className='form-control' name=\"username\" validate={isRequired('This field is required')} type=\"text\" placeholder=\"username\" />\r\n                            <ErrorMessage className='text-c-red' name=\"username\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='my-3'>\r\n                        <Col sm={3}>\r\n                            <label htmlFor=\"username\">Email</label>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Field className='form-control' name=\"email\" validate={isRequired('This field is required')} type=\"text\" placeholder=\"email\" />\r\n                            <ErrorMessage className='text-c-red' name=\"email\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"submit\">Submit</Button>\r\n                </Form>\r\n            )}\r\n            />\r\n        </Card.Body>\r\n    </Card>\r\n);\r\n\r\nexport default CombinedValidations;"]},"metadata":{},"sourceType":"module"}