{"ast":null,"code":"const chartData = {\n  height: 400,\n  type: 'heatmap',\n  options: {\n    dataLabels: {\n      enabled: false\n    },\n    colors: ['#4099ff']\n  },\n  series: [{\n    name: 'Metric1',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric2',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric3',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric4',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric5',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric6',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric7',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric8',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric9',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric10',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric11',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric12',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric13',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }, {\n    name: 'Metric14',\n    data: generateDataSabraThat(12, {\n      min: 0,\n      max: 90\n    })\n  }]\n};\n\nfunction generateDataSabraThat(count, yrange) {\n  let i = 0;\n  const series = [];\n\n  while (i < count) {\n    series.push({\n      x: 'w' + (i + 1).toString(),\n      y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n    });\n    i++;\n  }\n\n  return series;\n}\n\nexport default chartData;","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/views/widgets/WidgetChart/chart/time-user-chart.js"],"names":["chartData","height","type","options","dataLabels","enabled","colors","series","name","data","generateDataSabraThat","min","max","count","yrange","i","push","x","toString","y","Math","floor","random"],"mappings":"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","sourcesContent":["const chartData = {\r\n    height: 400,\r\n    type: 'heatmap',\r\n    options: {\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        colors: ['#4099ff']\r\n    },\r\n    series: [\r\n        {\r\n            name: 'Metric1',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric2',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric3',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric4',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric5',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric6',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric7',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric8',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric9',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric10',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric11',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric12',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric13',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        },\r\n        {\r\n            name: 'Metric14',\r\n            data: generateDataSabraThat(12, {\r\n                min: 0,\r\n                max: 90\r\n            })\r\n        }\r\n    ]\r\n}\r\n\r\nfunction generateDataSabraThat(count, yrange) {\r\n    let i = 0;\r\n    const series = [];\r\n    while (i < count) {\r\n        series.push({\r\n            x: 'w' + (i + 1).toString(),\r\n            y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\r\n        });\r\n        i++;\r\n    }\r\n    return series;\r\n}\r\nexport default chartData;\r\n"]},"metadata":{},"sourceType":"module"}