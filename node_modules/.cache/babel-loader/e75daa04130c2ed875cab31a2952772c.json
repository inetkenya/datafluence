{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/datafluence/src/contexts/FirebaseContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useReducer } from 'react';\nimport { FIREBASE_STATE_CHANGED } from \"../store/actions\";\nimport firebase from '../firebase/lib';\nimport Loader from \"../components/Loader/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isLoggedIn: false,\n  isInitialised: false,\n  user: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case FIREBASE_STATE_CHANGED:\n      {\n        const {\n          isLoggedIn,\n          user\n        } = action.payload;\n        return { ...state,\n          isLoggedIn,\n          isInitialised: true,\n          user\n        };\n      }\n\n    default:\n      {\n        return { ...state\n        };\n      }\n  }\n};\n\nconst FirebaseContext = /*#__PURE__*/createContext({ ...initialState,\n  firebaseEmailPasswordNewUser: () => Promise.resolve(),\n  firebaseEmailPasswordSignIn: () => Promise.resolve(),\n  firebaseGoogleSignIn: () => Promise.resolve(),\n  logout: () => Promise.resolve()\n});\nexport const FirebaseProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const firebaseEmailPasswordSignIn = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password);\n  };\n\n  const firebaseGoogleSignIn = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(provider);\n  };\n\n  const firebaseEmailPasswordNewUser = async (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password);\n  };\n\n  const logout = () => {\n    return firebase.auth().signOut();\n  };\n\n  useEffect(() => {\n    return firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        dispatch({\n          type: FIREBASE_STATE_CHANGED,\n          payload: {\n            isLoggedIn: true,\n            user: {\n              id: user.uid,\n              email: user.email\n            }\n          }\n        });\n      } else {\n        dispatch({\n          type: FIREBASE_STATE_CHANGED,\n          payload: {\n            isLoggedIn: false,\n            user: null\n          }\n        });\n      }\n    });\n  }, [dispatch]);\n\n  if (!state.isInitialised) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FirebaseContext.Provider, {\n    value: { ...state,\n      firebaseEmailPasswordNewUser,\n      firebaseEmailPasswordSignIn,\n      firebaseGoogleSignIn,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n};\n\n_s(FirebaseProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = FirebaseProvider;\nexport default FirebaseContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseProvider\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/datafluence/src/contexts/FirebaseContext.js"],"names":["React","createContext","useEffect","useReducer","FIREBASE_STATE_CHANGED","firebase","Loader","initialState","isLoggedIn","isInitialised","user","reducer","state","action","type","payload","FirebaseContext","firebaseEmailPasswordNewUser","Promise","resolve","firebaseEmailPasswordSignIn","firebaseGoogleSignIn","logout","FirebaseProvider","children","dispatch","email","password","auth","signInWithEmailAndPassword","provider","GoogleAuthProvider","signInWithPopup","createUserWithEmailAndPassword","signOut","onAuthStateChanged","id","uid"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useReducer } from 'react';\r\n\r\n  import { FIREBASE_STATE_CHANGED } from \"../store/actions\";\r\nimport firebase from '../firebase/lib';\r\nimport Loader from \"../components/Loader/Loader\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  isInitialised: false,\r\n  user: null\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case FIREBASE_STATE_CHANGED: {\r\n      const { isLoggedIn, user } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isLoggedIn,\r\n        isInitialised: true,\r\n        user\r\n      };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n};\r\n\r\nconst FirebaseContext = createContext({\r\n  ...initialState,\r\n  firebaseEmailPasswordNewUser: () => Promise.resolve(),\r\n  firebaseEmailPasswordSignIn: () => Promise.resolve(),\r\n  firebaseGoogleSignIn: () => Promise.resolve(),\r\n  logout: () => Promise.resolve()\r\n});\r\n\r\nexport const FirebaseProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const firebaseEmailPasswordSignIn = (email, password) => {\r\n    return firebase.auth().signInWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  const firebaseGoogleSignIn = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    return firebase.auth().signInWithPopup(provider);\r\n  };\r\n\r\n  const firebaseEmailPasswordNewUser = async (email, password) => {\r\n    return firebase.auth().createUserWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  const logout = () => {\r\n    return firebase.auth().signOut();\r\n  };\r\n\r\n  useEffect(() => {\r\n    return firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        dispatch({\r\n          type: FIREBASE_STATE_CHANGED,\r\n          payload: {\r\n            isLoggedIn: true,\r\n            user: {\r\n              id: user.uid,\r\n              email: user.email,\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: FIREBASE_STATE_CHANGED,\r\n          payload: {\r\n            isLoggedIn: false,\r\n            user: null\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  if (!state.isInitialised) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n      <FirebaseContext.Provider value={{ ...state, firebaseEmailPasswordNewUser, firebaseEmailPasswordSignIn, firebaseGoogleSignIn, logout }}>\r\n        {children}\r\n      </FirebaseContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FirebaseContext;\r\n"]},"metadata":{},"sourceType":"module"}