import * as React from 'react';
import Navigator from './Navigator';
import StepGroup from './StepGroup';
import StepTracker from './StepTracker';
import Steps from './Steps';
import { WizardProps, WizardState } from '../common/types';
declare class Wizard extends React.PureComponent<WizardProps, WizardState> {
    static Navigator: typeof Navigator;
    static StepGroup: typeof StepGroup;
    static StepTracker: typeof StepTracker;
    static Steps: typeof Steps;
    static propTypes: {
        children: (props: WizardProps, propName: string, componentName: string) => null;
    };
    static defaultProps: {
        children: never[];
    };
    componentDidUpdate(prevProps: WizardProps, prevState: WizardState): void;
    handleChildrenChange: (children: JSX.Element | JSX.Element[], currentStep: number) => void;
    handleStepChange: (currentStep: number, totalSteps: number) => void;
    goToStep: (step: number) => void;
    firstStep: () => void;
    lastStep: () => void;
    nextStep: () => void;
    prevStep: () => void;
    getFirstStepProps: (props?: {
        onClick: undefined;
    }) => React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getLastStepProps: (props?: {
        onClick: undefined;
    }) => React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getNextStepProps: (props?: {
        onClick: undefined;
    }) => React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getPrevStepProps: (props?: {
        onClick: undefined;
    }) => React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    state: WizardState;
    render(): JSX.Element;
}
export default Wizard;
